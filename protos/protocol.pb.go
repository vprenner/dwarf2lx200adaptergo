// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: protocol.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModuleId int32

const (
	ModuleId_MODULE_NONE        ModuleId = 0  // No
	ModuleId_MODULE_CAMERA_TELE ModuleId = 1  // 10000-10499 Telephoto camera module
	ModuleId_MODULE_CAMERA_WIDE ModuleId = 2  // 12000-12499 Wide-angle camera module
	ModuleId_MODULE_ASTRO       ModuleId = 3  // 11000-11499 Astronomy module
	ModuleId_MODULE_SYSTEM      ModuleId = 4  // 13000-13299 System modules
	ModuleId_MODULE_RGB_POWER   ModuleId = 5  // 13500-13799 RGB & Power Management Modules
	ModuleId_MODULE_MOTOR       ModuleId = 6  // 14000-14499 Motor module
	ModuleId_MODULE_TRACK       ModuleId = 7  // 14800-14899 Tracking module
	ModuleId_MODULE_FOCUS       ModuleId = 8  // 15000-15099 Focusing module
	ModuleId_MODULE_NOTIFY      ModuleId = 9  // 15200-15499 Notification module
	ModuleId_MODULE_PANORAMA    ModuleId = 10 // 15500-15599 Panoramic module
)

// Enum value maps for ModuleId.
var (
	ModuleId_name = map[int32]string{
		0:  "MODULE_NONE",
		1:  "MODULE_CAMERA_TELE",
		2:  "MODULE_CAMERA_WIDE",
		3:  "MODULE_ASTRO",
		4:  "MODULE_SYSTEM",
		5:  "MODULE_RGB_POWER",
		6:  "MODULE_MOTOR",
		7:  "MODULE_TRACK",
		8:  "MODULE_FOCUS",
		9:  "MODULE_NOTIFY",
		10: "MODULE_PANORAMA",
	}
	ModuleId_value = map[string]int32{
		"MODULE_NONE":        0,
		"MODULE_CAMERA_TELE": 1,
		"MODULE_CAMERA_WIDE": 2,
		"MODULE_ASTRO":       3,
		"MODULE_SYSTEM":      4,
		"MODULE_RGB_POWER":   5,
		"MODULE_MOTOR":       6,
		"MODULE_TRACK":       7,
		"MODULE_FOCUS":       8,
		"MODULE_NOTIFY":      9,
		"MODULE_PANORAMA":    10,
	}
)

func (x ModuleId) Enum() *ModuleId {
	p := new(ModuleId)
	*p = x
	return p
}

func (x ModuleId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleId) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (ModuleId) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x ModuleId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleId.Descriptor instead.
func (ModuleId) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

type MessageTypeId int32

const (
	MessageTypeId_TYPE_REQUEST               MessageTypeId = 0 // Message Type Request
	MessageTypeId_TYPE_REQUEST_RESPONSE      MessageTypeId = 1 // Message Type Request Response
	MessageTypeId_TYPE_NOTIFICATION          MessageTypeId = 2 // Message Type Notification
	MessageTypeId_TYPE_NOTIFICATION_RESPONSE MessageTypeId = 3 // Message Type Notification Response
)

// Enum value maps for MessageTypeId.
var (
	MessageTypeId_name = map[int32]string{
		0: "TYPE_REQUEST",
		1: "TYPE_REQUEST_RESPONSE",
		2: "TYPE_NOTIFICATION",
		3: "TYPE_NOTIFICATION_RESPONSE",
	}
	MessageTypeId_value = map[string]int32{
		"TYPE_REQUEST":               0,
		"TYPE_REQUEST_RESPONSE":      1,
		"TYPE_NOTIFICATION":          2,
		"TYPE_NOTIFICATION_RESPONSE": 3,
	}
)

func (x MessageTypeId) Enum() *MessageTypeId {
	p := new(MessageTypeId)
	*p = x
	return p
}

func (x MessageTypeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageTypeId) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[1].Descriptor()
}

func (MessageTypeId) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[1]
}

func (x MessageTypeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageTypeId.Descriptor instead.
func (MessageTypeId) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

type DwarfCMD int32

const (
	DwarfCMD_NO_CMD                                        DwarfCMD = 0     // No Cmd
	DwarfCMD_CMD_CAMERA_TELE_OPEN_CAMERA                   DwarfCMD = 10000 // Turn on the camera
	DwarfCMD_CMD_CAMERA_TELE_CLOSE_CAMERA                  DwarfCMD = 10001 // Turn off the camera
	DwarfCMD_CMD_CAMERA_TELE_PHOTOGRAPH                    DwarfCMD = 10002 // Take photos
	DwarfCMD_CMD_CAMERA_TELE_BURST                         DwarfCMD = 10003 // Start continuous shooting
	DwarfCMD_CMD_CAMERA_TELE_STOP_BURST                    DwarfCMD = 10004 // Stop continuous shooting
	DwarfCMD_CMD_CAMERA_TELE_START_RECORD                  DwarfCMD = 10005 // Start recording
	DwarfCMD_CMD_CAMERA_TELE_STOP_RECORD                   DwarfCMD = 10006 // Stop recording
	DwarfCMD_CMD_CAMERA_TELE_SET_EXP_MODE                  DwarfCMD = 10007 // Set exposure mode
	DwarfCMD_CMD_CAMERA_TELE_GET_EXP_MODE                  DwarfCMD = 10008 // Acquire exposure mode
	DwarfCMD_CMD_CAMERA_TELE_SET_EXP                       DwarfCMD = 10009 // Set exposure value
	DwarfCMD_CMD_CAMERA_TELE_GET_EXP                       DwarfCMD = 10010 // Get exposure value
	DwarfCMD_CMD_CAMERA_TELE_SET_GAIN_MODE                 DwarfCMD = 10011 // Set gain mode
	DwarfCMD_CMD_CAMERA_TELE_GET_GAIN_MODE                 DwarfCMD = 10012 // Acquisition gain mode
	DwarfCMD_CMD_CAMERA_TELE_SET_GAIN                      DwarfCMD = 10013 // Set gain value
	DwarfCMD_CMD_CAMERA_TELE_GET_GAIN                      DwarfCMD = 10014 // Get gain value
	DwarfCMD_CMD_CAMERA_TELE_SET_BRIGHTNESS                DwarfCMD = 10015 // Set brightness
	DwarfCMD_CMD_CAMERA_TELE_GET_BRIGHTNESS                DwarfCMD = 10016 // Acquire brightness
	DwarfCMD_CMD_CAMERA_TELE_SET_CONTRAST                  DwarfCMD = 10017 // Set contrast
	DwarfCMD_CMD_CAMERA_TELE_GET_CONTRAST                  DwarfCMD = 10018 // Get contrast
	DwarfCMD_CMD_CAMERA_TELE_SET_SATURATION                DwarfCMD = 10019 // Set saturation
	DwarfCMD_CMD_CAMERA_TELE_GET_SATURATION                DwarfCMD = 10020 // Acquire saturation
	DwarfCMD_CMD_CAMERA_TELE_SET_HUE                       DwarfCMD = 10021 // Set tone
	DwarfCMD_CMD_CAMERA_TELE_GET_HUE                       DwarfCMD = 10022 // Get hue
	DwarfCMD_CMD_CAMERA_TELE_SET_SHARPNESS                 DwarfCMD = 10023 // Set sharpness
	DwarfCMD_CMD_CAMERA_TELE_GET_SHARPNESS                 DwarfCMD = 10024 // Acquire sharpness
	DwarfCMD_CMD_CAMERA_TELE_SET_WB_MODE                   DwarfCMD = 10025 // Set white balance mode
	DwarfCMD_CMD_CAMERA_TELE_GET_WB_MODE                   DwarfCMD = 10026 // Acquire white balance mode
	DwarfCMD_CMD_CAMERA_TELE_SET_WB_SCENE                  DwarfCMD = 10027 // Set white balance scene
	DwarfCMD_CMD_CAMERA_TELE_GET_WB_SCENE                  DwarfCMD = 10028 // Get white balance scene
	DwarfCMD_CMD_CAMERA_TELE_SET_WB_CT                     DwarfCMD = 10029 // Set the white balance color temperature value
	DwarfCMD_CMD_CAMERA_TELE_GET_WB_CT                     DwarfCMD = 10030 // Obtain the white balance color temperature value
	DwarfCMD_CMD_CAMERA_TELE_SET_IRCUT                     DwarfCMD = 10031 // Set IRCUT
	DwarfCMD_CMD_CAMERA_TELE_GET_IRCUT                     DwarfCMD = 10032 // Get IRCUT status
	DwarfCMD_CMD_CAMERA_TELE_START_TIMELAPSE_PHOTO         DwarfCMD = 10033 // Start time-lapse photography
	DwarfCMD_CMD_CAMERA_TELE_STOP_TIMELAPSE_PHOTO          DwarfCMD = 10034 // Stop time-lapse photography
	DwarfCMD_CMD_CAMERA_TELE_SET_ALL_PARAMS                DwarfCMD = 10035 // Set all parameters
	DwarfCMD_CMD_CAMERA_TELE_GET_ALL_PARAMS                DwarfCMD = 10036 // Get all parameters
	DwarfCMD_CMD_CAMERA_TELE_SET_FEATURE_PARAM             DwarfCMD = 10037 // Set feature parameters
	DwarfCMD_CMD_CAMERA_TELE_GET_ALL_FEATURE_PARAMS        DwarfCMD = 10038 // Get all feature parameters
	DwarfCMD_CMD_CAMERA_TELE_GET_SYSTEM_WORKING_STATE      DwarfCMD = 10039 // Get the working status of the whole machine
	DwarfCMD_CMD_CAMERA_TELE_SET_JPG_QUALITY               DwarfCMD = 10040 // Set jpg preview quality
	DwarfCMD_CMD_ASTRO_START_CALIBRATION                   DwarfCMD = 11000 // Start calibration
	DwarfCMD_CMD_ASTRO_STOP_CALIBRATION                    DwarfCMD = 11001 // Stop calibration
	DwarfCMD_CMD_ASTRO_START_GOTO_DSO                      DwarfCMD = 11002 // Start GOTO Deep Space Object
	DwarfCMD_CMD_ASTRO_START_GOTO_SOLAR_SYSTEM             DwarfCMD = 11003 // Start GOTO Solar System Target
	DwarfCMD_CMD_ASTRO_STOP_GOTO                           DwarfCMD = 11004 // Stop GOTO
	DwarfCMD_CMD_ASTRO_START_CAPTURE_RAW_LIVE_STACKING     DwarfCMD = 11005 // Start stacking
	DwarfCMD_CMD_ASTRO_STOP_CAPTURE_RAW_LIVE_STACKING      DwarfCMD = 11006 // Stop overlay
	DwarfCMD_CMD_ASTRO_START_CAPTURE_RAW_DARK              DwarfCMD = 11007 // Start shooting dark scenes
	DwarfCMD_CMD_ASTRO_STOP_CAPTURE_RAW_DARK               DwarfCMD = 11008 // Stop filming darkfield
	DwarfCMD_CMD_ASTRO_CHECK_GOT_DARK                      DwarfCMD = 11009 // Inquire about the dark field that has been shot
	DwarfCMD_CMD_ASTRO_GO_LIVE                             DwarfCMD = 11010 // GO LIVE interface
	DwarfCMD_CMD_ASTRO_START_TRACK_SPECIAL_TARGET          DwarfCMD = 11011 // Start tracking the sun and moon
	DwarfCMD_CMD_ASTRO_STOP_TRACK_SPECIAL_TARGET           DwarfCMD = 11012 // Stop tracking the sun and moon
	DwarfCMD_CMD_CAMERA_WIDE_OPEN_CAMERA                   DwarfCMD = 12000 // Turn on the camera
	DwarfCMD_CMD_CAMERA_WIDE_CLOSE_CAMERA                  DwarfCMD = 12001 // Turn off the camera
	DwarfCMD_CMD_CAMERA_WIDE_SET_EXP_MODE                  DwarfCMD = 12002 // Set exposure mode
	DwarfCMD_CMD_CAMERA_WIDE_GET_EXP_MODE                  DwarfCMD = 12003 // Acquire exposure mode
	DwarfCMD_CMD_CAMERA_WIDE_SET_EXP                       DwarfCMD = 12004 // Set exposure value
	DwarfCMD_CMD_CAMERA_WIDE_GET_EXP                       DwarfCMD = 12005 // Get exposure value
	DwarfCMD_CMD_CAMERA_WIDE_SET_GAIN                      DwarfCMD = 12006 // Set gain
	DwarfCMD_CMD_CAMERA_WIDE_GET_GAIN                      DwarfCMD = 12007 // Acquisition gain
	DwarfCMD_CMD_CAMERA_WIDE_SET_BRIGHTNESS                DwarfCMD = 12008 // Set brightness
	DwarfCMD_CMD_CAMERA_WIDE_GET_BRIGHTNESS                DwarfCMD = 12009 // Acquire brightness
	DwarfCMD_CMD_CAMERA_WIDE_SET_CONTRAST                  DwarfCMD = 12010 // Set contrast
	DwarfCMD_CMD_CAMERA_WIDE_GET_CONTRAST                  DwarfCMD = 12011 // Get contrast
	DwarfCMD_CMD_CAMERA_WIDE_SET_SATURATION                DwarfCMD = 12012 // Set saturation
	DwarfCMD_CMD_CAMERA_WIDE_GET_SATURATION                DwarfCMD = 12013 // Acquire saturation
	DwarfCMD_CMD_CAMERA_WIDE_SET_HUE                       DwarfCMD = 12014 // Set tone
	DwarfCMD_CMD_CAMERA_WIDE_GET_HUE                       DwarfCMD = 12015 // Get hue
	DwarfCMD_CMD_CAMERA_WIDE_SET_SHARPNESS                 DwarfCMD = 12016 // Set sharpness
	DwarfCMD_CMD_CAMERA_WIDE_GET_SHARPNESS                 DwarfCMD = 12017 // Acquire sharpness
	DwarfCMD_CMD_CAMERA_WIDE_SET_WB_MODE                   DwarfCMD = 12018 // Set white balance mode
	DwarfCMD_CMD_CAMERA_WIDE_GET_WB_MODE                   DwarfCMD = 12019 // Acquire white balance mode
	DwarfCMD_CMD_CAMERA_WIDE_SET_WB_CT                     DwarfCMD = 12020 // Set white balance color temperature
	DwarfCMD_CMD_CAMERA_WIDE_GET_WB_CT                     DwarfCMD = 12021 // Obtain white balance color temperature
	DwarfCMD_CMD_CAMERA_WIDE_PHOTOGRAPH                    DwarfCMD = 12022 // Take photos
	DwarfCMD_CMD_CAMERA_WIDE_BURST                         DwarfCMD = 12023 // Continuous shooting
	DwarfCMD_CMD_CAMERA_WIDE_STOP_BURST                    DwarfCMD = 12024 // Stop continuous shooting
	DwarfCMD_CMD_CAMERA_WIDE_START_TIMELAPSE_PHOTO         DwarfCMD = 12025 // Start time-lapse photography
	DwarfCMD_CMD_CAMERA_WIDE_STOP_TIMELAPSE_PHOTO          DwarfCMD = 12026 // Stop time-lapse photography
	DwarfCMD_CMD_CAMERA_WIDE_GET_ALL_PARAMS                DwarfCMD = 12027 // Get all parameters
	DwarfCMD_CMD_CAMERA_WIDE_SET_ALL_PARAMS                DwarfCMD = 12028 // Set all parameters
	DwarfCMD_CMD_SYSTEM_SET_TIME                           DwarfCMD = 13000 // Set the system time
	DwarfCMD_CMD_SYSTEM_SET_TIME_ZONE                      DwarfCMD = 13001 // Set the time zone
	DwarfCMD_CMD_SYSTEM_SET_MTP_MODE                       DwarfCMD = 13002 // Set MTP mode
	DwarfCMD_CMD_SYSTEM_SET_CPU_MODE                       DwarfCMD = 13003 // Set CPU mode
	DwarfCMD_CMD_RGB_POWER_OPEN_RGB                        DwarfCMD = 13500 // Turn on the ring light
	DwarfCMD_CMD_RGB_POWER_CLOSE_RGB                       DwarfCMD = 13501 // Turn off the ring light
	DwarfCMD_CMD_RGB_POWER_POWER_DOWN                      DwarfCMD = 13502 // Shut down
	DwarfCMD_CMD_RGB_POWER_POWERIND_ON                     DwarfCMD = 13503 // Turn on the battery indicator
	DwarfCMD_CMD_RGB_POWER_POWERIND_OFF                    DwarfCMD = 13504 // Turn off battery indicator =
	DwarfCMD_CMD_RGB_POWER_REBOOT                          DwarfCMD = 13505 // Restart
	DwarfCMD_CMD_FOCUS_AUTO_FOCUS                          DwarfCMD = 15000 // Normal mode autofocus
	DwarfCMD_CMD_FOCUS_MANUAL_SINGLE_STEP_FOCUS            DwarfCMD = 15001 // Manual single-step focusing
	DwarfCMD_CMD_FOCUS_START_MANUAL_CONTINU_FOCUS          DwarfCMD = 15002 // Start manual continuous focus
	DwarfCMD_CMD_FOCUS_STOP_MANUAL_CONTINU_FOCUS           DwarfCMD = 15003 // Stop manual continuous focus
	DwarfCMD_CMD_FOCUS_START_ASTRO_AUTO_FOCUS              DwarfCMD = 15004 // Start astronomical autofocus
	DwarfCMD_CMD_FOCUS_STOP_ASTRO_AUTO_FOCUS               DwarfCMD = 15005 // Stop astronomical autofocus
	DwarfCMD_CMD_NOTIFY_TELE_WIDI_PICTURE_MATCHING         DwarfCMD = 15200 // Telephoto wide-angle image matching
	DwarfCMD_CMD_NOTIFY_ELE                                DwarfCMD = 15201 // Battery Notification
	DwarfCMD_CMD_NOTIFY_CHARGE                             DwarfCMD = 15202 // Charge status notification
	DwarfCMD_CMD_NOTIFY_SDCARD_INFO                        DwarfCMD = 15203 // SD card capacity notification
	DwarfCMD_CMD_NOTIFY_TELE_RECORD_TIME                   DwarfCMD = 15204 // Recording time
	DwarfCMD_CMD_NOTIFY_TELE_TIMELAPSE_OUT_TIME            DwarfCMD = 15205 // Telephoto time-lapse photography time
	DwarfCMD_CMD_NOTIFY_STATE_CAPTURE_RAW_DARK             DwarfCMD = 15206 // Dark field shooting state
	DwarfCMD_CMD_NOTIFY_PROGRASS_CAPTURE_RAW_DARK          DwarfCMD = 15207 // Dark field shooting progress
	DwarfCMD_CMD_NOTIFY_STATE_CAPTURE_RAW_LIVE_STACKING    DwarfCMD = 15208 // Astronomical overlay shooting status
	DwarfCMD_CMD_NOTIFY_PROGRASS_CAPTURE_RAW_LIVE_STACKING DwarfCMD = 15209 // Astronomical overlay shooting progress
	DwarfCMD_CMD_NOTIFY_STATE_ASTRO_CALIBRATION            DwarfCMD = 15210 // Astronomical calibration status
	DwarfCMD_CMD_NOTIFY_STATE_ASTRO_GOTO                   DwarfCMD = 15211 // Astronomical GOTO status
	DwarfCMD_CMD_NOTIFY_STATE_ASTRO_TRACKING               DwarfCMD = 15212 // Astronomical tracking status
	DwarfCMD_CMD_NOTIFY_TELE_SET_PARAM                     DwarfCMD = 15213 // Telephoto parameter echo
	DwarfCMD_CMD_NOTIFY_WIDE_SET_PARAM                     DwarfCMD = 15214 // Wide-angle parametric echo
	DwarfCMD_CMD_NOTIFY_TELE_FUNCTION_STATE                DwarfCMD = 15215 // Telephoto functional status
	DwarfCMD_CMD_NOTIFY_WIDE_FUNCTION_STATE                DwarfCMD = 15216 // Wide-angle functional status
	DwarfCMD_CMD_NOTIFY_SET_FEATURE_PARAM                  DwarfCMD = 15217 // Feature parameter echo
	DwarfCMD_CMD_NOTIFY_TELE_BURST_PROGRESS                DwarfCMD = 15218 // Telephoto continuous shooting progress
	DwarfCMD_CMD_NOTIFY_PANORAMA_PROGRESS                  DwarfCMD = 15219 // Telephoto panoramic shooting progress
	DwarfCMD_CMD_NOTIFY_WIDE_BURST_PROGRESS                DwarfCMD = 15220 // Wide-angle continuous shooting progress
	DwarfCMD_CMD_NOTIFY_RGB_STATE                          DwarfCMD = 15221 // RGB Ring Light Status
	DwarfCMD_CMD_NOTIFY_POWER_IND_STATE                    DwarfCMD = 15222 // Power indicator status
	DwarfCMD_CMD_NOTIFY_WS_HOST_SLAVE_MODE                 DwarfCMD = 15223 // Leader/follower mode notification
	DwarfCMD_CMD_NOTIFY_MTP_STATE                          DwarfCMD = 15224 // MTP mode notification
	DwarfCMD_CMD_NOTIFY_TRACK_RESULT                       DwarfCMD = 15225 // Tracking result notification
	DwarfCMD_CMD_NOTIFY_WIDE_TIMELAPSE_OUT_TIME            DwarfCMD = 15226 // Wide-angle time-lapse photography time
	DwarfCMD_CMD_NOTIFY_CPU_MODE                           DwarfCMD = 15227 // CPU mode
	DwarfCMD_CMD_NOTIFY_STATE_ASTRO_TRACKING_SPECIAL       DwarfCMD = 15228 // Sun and moon tracking status
	DwarfCMD_CMD_NOTIFY_POWER_OFF                          DwarfCMD = 15229 // Shutdown notification
)

// Enum value maps for DwarfCMD.
var (
	DwarfCMD_name = map[int32]string{
		0:     "NO_CMD",
		10000: "CMD_CAMERA_TELE_OPEN_CAMERA",
		10001: "CMD_CAMERA_TELE_CLOSE_CAMERA",
		10002: "CMD_CAMERA_TELE_PHOTOGRAPH",
		10003: "CMD_CAMERA_TELE_BURST",
		10004: "CMD_CAMERA_TELE_STOP_BURST",
		10005: "CMD_CAMERA_TELE_START_RECORD",
		10006: "CMD_CAMERA_TELE_STOP_RECORD",
		10007: "CMD_CAMERA_TELE_SET_EXP_MODE",
		10008: "CMD_CAMERA_TELE_GET_EXP_MODE",
		10009: "CMD_CAMERA_TELE_SET_EXP",
		10010: "CMD_CAMERA_TELE_GET_EXP",
		10011: "CMD_CAMERA_TELE_SET_GAIN_MODE",
		10012: "CMD_CAMERA_TELE_GET_GAIN_MODE",
		10013: "CMD_CAMERA_TELE_SET_GAIN",
		10014: "CMD_CAMERA_TELE_GET_GAIN",
		10015: "CMD_CAMERA_TELE_SET_BRIGHTNESS",
		10016: "CMD_CAMERA_TELE_GET_BRIGHTNESS",
		10017: "CMD_CAMERA_TELE_SET_CONTRAST",
		10018: "CMD_CAMERA_TELE_GET_CONTRAST",
		10019: "CMD_CAMERA_TELE_SET_SATURATION",
		10020: "CMD_CAMERA_TELE_GET_SATURATION",
		10021: "CMD_CAMERA_TELE_SET_HUE",
		10022: "CMD_CAMERA_TELE_GET_HUE",
		10023: "CMD_CAMERA_TELE_SET_SHARPNESS",
		10024: "CMD_CAMERA_TELE_GET_SHARPNESS",
		10025: "CMD_CAMERA_TELE_SET_WB_MODE",
		10026: "CMD_CAMERA_TELE_GET_WB_MODE",
		10027: "CMD_CAMERA_TELE_SET_WB_SCENE",
		10028: "CMD_CAMERA_TELE_GET_WB_SCENE",
		10029: "CMD_CAMERA_TELE_SET_WB_CT",
		10030: "CMD_CAMERA_TELE_GET_WB_CT",
		10031: "CMD_CAMERA_TELE_SET_IRCUT",
		10032: "CMD_CAMERA_TELE_GET_IRCUT",
		10033: "CMD_CAMERA_TELE_START_TIMELAPSE_PHOTO",
		10034: "CMD_CAMERA_TELE_STOP_TIMELAPSE_PHOTO",
		10035: "CMD_CAMERA_TELE_SET_ALL_PARAMS",
		10036: "CMD_CAMERA_TELE_GET_ALL_PARAMS",
		10037: "CMD_CAMERA_TELE_SET_FEATURE_PARAM",
		10038: "CMD_CAMERA_TELE_GET_ALL_FEATURE_PARAMS",
		10039: "CMD_CAMERA_TELE_GET_SYSTEM_WORKING_STATE",
		10040: "CMD_CAMERA_TELE_SET_JPG_QUALITY",
		11000: "CMD_ASTRO_START_CALIBRATION",
		11001: "CMD_ASTRO_STOP_CALIBRATION",
		11002: "CMD_ASTRO_START_GOTO_DSO",
		11003: "CMD_ASTRO_START_GOTO_SOLAR_SYSTEM",
		11004: "CMD_ASTRO_STOP_GOTO",
		11005: "CMD_ASTRO_START_CAPTURE_RAW_LIVE_STACKING",
		11006: "CMD_ASTRO_STOP_CAPTURE_RAW_LIVE_STACKING",
		11007: "CMD_ASTRO_START_CAPTURE_RAW_DARK",
		11008: "CMD_ASTRO_STOP_CAPTURE_RAW_DARK",
		11009: "CMD_ASTRO_CHECK_GOT_DARK",
		11010: "CMD_ASTRO_GO_LIVE",
		11011: "CMD_ASTRO_START_TRACK_SPECIAL_TARGET",
		11012: "CMD_ASTRO_STOP_TRACK_SPECIAL_TARGET",
		12000: "CMD_CAMERA_WIDE_OPEN_CAMERA",
		12001: "CMD_CAMERA_WIDE_CLOSE_CAMERA",
		12002: "CMD_CAMERA_WIDE_SET_EXP_MODE",
		12003: "CMD_CAMERA_WIDE_GET_EXP_MODE",
		12004: "CMD_CAMERA_WIDE_SET_EXP",
		12005: "CMD_CAMERA_WIDE_GET_EXP",
		12006: "CMD_CAMERA_WIDE_SET_GAIN",
		12007: "CMD_CAMERA_WIDE_GET_GAIN",
		12008: "CMD_CAMERA_WIDE_SET_BRIGHTNESS",
		12009: "CMD_CAMERA_WIDE_GET_BRIGHTNESS",
		12010: "CMD_CAMERA_WIDE_SET_CONTRAST",
		12011: "CMD_CAMERA_WIDE_GET_CONTRAST",
		12012: "CMD_CAMERA_WIDE_SET_SATURATION",
		12013: "CMD_CAMERA_WIDE_GET_SATURATION",
		12014: "CMD_CAMERA_WIDE_SET_HUE",
		12015: "CMD_CAMERA_WIDE_GET_HUE",
		12016: "CMD_CAMERA_WIDE_SET_SHARPNESS",
		12017: "CMD_CAMERA_WIDE_GET_SHARPNESS",
		12018: "CMD_CAMERA_WIDE_SET_WB_MODE",
		12019: "CMD_CAMERA_WIDE_GET_WB_MODE",
		12020: "CMD_CAMERA_WIDE_SET_WB_CT",
		12021: "CMD_CAMERA_WIDE_GET_WB_CT",
		12022: "CMD_CAMERA_WIDE_PHOTOGRAPH",
		12023: "CMD_CAMERA_WIDE_BURST",
		12024: "CMD_CAMERA_WIDE_STOP_BURST",
		12025: "CMD_CAMERA_WIDE_START_TIMELAPSE_PHOTO",
		12026: "CMD_CAMERA_WIDE_STOP_TIMELAPSE_PHOTO",
		12027: "CMD_CAMERA_WIDE_GET_ALL_PARAMS",
		12028: "CMD_CAMERA_WIDE_SET_ALL_PARAMS",
		13000: "CMD_SYSTEM_SET_TIME",
		13001: "CMD_SYSTEM_SET_TIME_ZONE",
		13002: "CMD_SYSTEM_SET_MTP_MODE",
		13003: "CMD_SYSTEM_SET_CPU_MODE",
		13500: "CMD_RGB_POWER_OPEN_RGB",
		13501: "CMD_RGB_POWER_CLOSE_RGB",
		13502: "CMD_RGB_POWER_POWER_DOWN",
		13503: "CMD_RGB_POWER_POWERIND_ON",
		13504: "CMD_RGB_POWER_POWERIND_OFF",
		13505: "CMD_RGB_POWER_REBOOT",
		15000: "CMD_FOCUS_AUTO_FOCUS",
		15001: "CMD_FOCUS_MANUAL_SINGLE_STEP_FOCUS",
		15002: "CMD_FOCUS_START_MANUAL_CONTINU_FOCUS",
		15003: "CMD_FOCUS_STOP_MANUAL_CONTINU_FOCUS",
		15004: "CMD_FOCUS_START_ASTRO_AUTO_FOCUS",
		15005: "CMD_FOCUS_STOP_ASTRO_AUTO_FOCUS",
		15200: "CMD_NOTIFY_TELE_WIDI_PICTURE_MATCHING",
		15201: "CMD_NOTIFY_ELE",
		15202: "CMD_NOTIFY_CHARGE",
		15203: "CMD_NOTIFY_SDCARD_INFO",
		15204: "CMD_NOTIFY_TELE_RECORD_TIME",
		15205: "CMD_NOTIFY_TELE_TIMELAPSE_OUT_TIME",
		15206: "CMD_NOTIFY_STATE_CAPTURE_RAW_DARK",
		15207: "CMD_NOTIFY_PROGRASS_CAPTURE_RAW_DARK",
		15208: "CMD_NOTIFY_STATE_CAPTURE_RAW_LIVE_STACKING",
		15209: "CMD_NOTIFY_PROGRASS_CAPTURE_RAW_LIVE_STACKING",
		15210: "CMD_NOTIFY_STATE_ASTRO_CALIBRATION",
		15211: "CMD_NOTIFY_STATE_ASTRO_GOTO",
		15212: "CMD_NOTIFY_STATE_ASTRO_TRACKING",
		15213: "CMD_NOTIFY_TELE_SET_PARAM",
		15214: "CMD_NOTIFY_WIDE_SET_PARAM",
		15215: "CMD_NOTIFY_TELE_FUNCTION_STATE",
		15216: "CMD_NOTIFY_WIDE_FUNCTION_STATE",
		15217: "CMD_NOTIFY_SET_FEATURE_PARAM",
		15218: "CMD_NOTIFY_TELE_BURST_PROGRESS",
		15219: "CMD_NOTIFY_PANORAMA_PROGRESS",
		15220: "CMD_NOTIFY_WIDE_BURST_PROGRESS",
		15221: "CMD_NOTIFY_RGB_STATE",
		15222: "CMD_NOTIFY_POWER_IND_STATE",
		15223: "CMD_NOTIFY_WS_HOST_SLAVE_MODE",
		15224: "CMD_NOTIFY_MTP_STATE",
		15225: "CMD_NOTIFY_TRACK_RESULT",
		15226: "CMD_NOTIFY_WIDE_TIMELAPSE_OUT_TIME",
		15227: "CMD_NOTIFY_CPU_MODE",
		15228: "CMD_NOTIFY_STATE_ASTRO_TRACKING_SPECIAL",
		15229: "CMD_NOTIFY_POWER_OFF",
	}
	DwarfCMD_value = map[string]int32{
		"NO_CMD":                                        0,
		"CMD_CAMERA_TELE_OPEN_CAMERA":                   10000,
		"CMD_CAMERA_TELE_CLOSE_CAMERA":                  10001,
		"CMD_CAMERA_TELE_PHOTOGRAPH":                    10002,
		"CMD_CAMERA_TELE_BURST":                         10003,
		"CMD_CAMERA_TELE_STOP_BURST":                    10004,
		"CMD_CAMERA_TELE_START_RECORD":                  10005,
		"CMD_CAMERA_TELE_STOP_RECORD":                   10006,
		"CMD_CAMERA_TELE_SET_EXP_MODE":                  10007,
		"CMD_CAMERA_TELE_GET_EXP_MODE":                  10008,
		"CMD_CAMERA_TELE_SET_EXP":                       10009,
		"CMD_CAMERA_TELE_GET_EXP":                       10010,
		"CMD_CAMERA_TELE_SET_GAIN_MODE":                 10011,
		"CMD_CAMERA_TELE_GET_GAIN_MODE":                 10012,
		"CMD_CAMERA_TELE_SET_GAIN":                      10013,
		"CMD_CAMERA_TELE_GET_GAIN":                      10014,
		"CMD_CAMERA_TELE_SET_BRIGHTNESS":                10015,
		"CMD_CAMERA_TELE_GET_BRIGHTNESS":                10016,
		"CMD_CAMERA_TELE_SET_CONTRAST":                  10017,
		"CMD_CAMERA_TELE_GET_CONTRAST":                  10018,
		"CMD_CAMERA_TELE_SET_SATURATION":                10019,
		"CMD_CAMERA_TELE_GET_SATURATION":                10020,
		"CMD_CAMERA_TELE_SET_HUE":                       10021,
		"CMD_CAMERA_TELE_GET_HUE":                       10022,
		"CMD_CAMERA_TELE_SET_SHARPNESS":                 10023,
		"CMD_CAMERA_TELE_GET_SHARPNESS":                 10024,
		"CMD_CAMERA_TELE_SET_WB_MODE":                   10025,
		"CMD_CAMERA_TELE_GET_WB_MODE":                   10026,
		"CMD_CAMERA_TELE_SET_WB_SCENE":                  10027,
		"CMD_CAMERA_TELE_GET_WB_SCENE":                  10028,
		"CMD_CAMERA_TELE_SET_WB_CT":                     10029,
		"CMD_CAMERA_TELE_GET_WB_CT":                     10030,
		"CMD_CAMERA_TELE_SET_IRCUT":                     10031,
		"CMD_CAMERA_TELE_GET_IRCUT":                     10032,
		"CMD_CAMERA_TELE_START_TIMELAPSE_PHOTO":         10033,
		"CMD_CAMERA_TELE_STOP_TIMELAPSE_PHOTO":          10034,
		"CMD_CAMERA_TELE_SET_ALL_PARAMS":                10035,
		"CMD_CAMERA_TELE_GET_ALL_PARAMS":                10036,
		"CMD_CAMERA_TELE_SET_FEATURE_PARAM":             10037,
		"CMD_CAMERA_TELE_GET_ALL_FEATURE_PARAMS":        10038,
		"CMD_CAMERA_TELE_GET_SYSTEM_WORKING_STATE":      10039,
		"CMD_CAMERA_TELE_SET_JPG_QUALITY":               10040,
		"CMD_ASTRO_START_CALIBRATION":                   11000,
		"CMD_ASTRO_STOP_CALIBRATION":                    11001,
		"CMD_ASTRO_START_GOTO_DSO":                      11002,
		"CMD_ASTRO_START_GOTO_SOLAR_SYSTEM":             11003,
		"CMD_ASTRO_STOP_GOTO":                           11004,
		"CMD_ASTRO_START_CAPTURE_RAW_LIVE_STACKING":     11005,
		"CMD_ASTRO_STOP_CAPTURE_RAW_LIVE_STACKING":      11006,
		"CMD_ASTRO_START_CAPTURE_RAW_DARK":              11007,
		"CMD_ASTRO_STOP_CAPTURE_RAW_DARK":               11008,
		"CMD_ASTRO_CHECK_GOT_DARK":                      11009,
		"CMD_ASTRO_GO_LIVE":                             11010,
		"CMD_ASTRO_START_TRACK_SPECIAL_TARGET":          11011,
		"CMD_ASTRO_STOP_TRACK_SPECIAL_TARGET":           11012,
		"CMD_CAMERA_WIDE_OPEN_CAMERA":                   12000,
		"CMD_CAMERA_WIDE_CLOSE_CAMERA":                  12001,
		"CMD_CAMERA_WIDE_SET_EXP_MODE":                  12002,
		"CMD_CAMERA_WIDE_GET_EXP_MODE":                  12003,
		"CMD_CAMERA_WIDE_SET_EXP":                       12004,
		"CMD_CAMERA_WIDE_GET_EXP":                       12005,
		"CMD_CAMERA_WIDE_SET_GAIN":                      12006,
		"CMD_CAMERA_WIDE_GET_GAIN":                      12007,
		"CMD_CAMERA_WIDE_SET_BRIGHTNESS":                12008,
		"CMD_CAMERA_WIDE_GET_BRIGHTNESS":                12009,
		"CMD_CAMERA_WIDE_SET_CONTRAST":                  12010,
		"CMD_CAMERA_WIDE_GET_CONTRAST":                  12011,
		"CMD_CAMERA_WIDE_SET_SATURATION":                12012,
		"CMD_CAMERA_WIDE_GET_SATURATION":                12013,
		"CMD_CAMERA_WIDE_SET_HUE":                       12014,
		"CMD_CAMERA_WIDE_GET_HUE":                       12015,
		"CMD_CAMERA_WIDE_SET_SHARPNESS":                 12016,
		"CMD_CAMERA_WIDE_GET_SHARPNESS":                 12017,
		"CMD_CAMERA_WIDE_SET_WB_MODE":                   12018,
		"CMD_CAMERA_WIDE_GET_WB_MODE":                   12019,
		"CMD_CAMERA_WIDE_SET_WB_CT":                     12020,
		"CMD_CAMERA_WIDE_GET_WB_CT":                     12021,
		"CMD_CAMERA_WIDE_PHOTOGRAPH":                    12022,
		"CMD_CAMERA_WIDE_BURST":                         12023,
		"CMD_CAMERA_WIDE_STOP_BURST":                    12024,
		"CMD_CAMERA_WIDE_START_TIMELAPSE_PHOTO":         12025,
		"CMD_CAMERA_WIDE_STOP_TIMELAPSE_PHOTO":          12026,
		"CMD_CAMERA_WIDE_GET_ALL_PARAMS":                12027,
		"CMD_CAMERA_WIDE_SET_ALL_PARAMS":                12028,
		"CMD_SYSTEM_SET_TIME":                           13000,
		"CMD_SYSTEM_SET_TIME_ZONE":                      13001,
		"CMD_SYSTEM_SET_MTP_MODE":                       13002,
		"CMD_SYSTEM_SET_CPU_MODE":                       13003,
		"CMD_RGB_POWER_OPEN_RGB":                        13500,
		"CMD_RGB_POWER_CLOSE_RGB":                       13501,
		"CMD_RGB_POWER_POWER_DOWN":                      13502,
		"CMD_RGB_POWER_POWERIND_ON":                     13503,
		"CMD_RGB_POWER_POWERIND_OFF":                    13504,
		"CMD_RGB_POWER_REBOOT":                          13505,
		"CMD_FOCUS_AUTO_FOCUS":                          15000,
		"CMD_FOCUS_MANUAL_SINGLE_STEP_FOCUS":            15001,
		"CMD_FOCUS_START_MANUAL_CONTINU_FOCUS":          15002,
		"CMD_FOCUS_STOP_MANUAL_CONTINU_FOCUS":           15003,
		"CMD_FOCUS_START_ASTRO_AUTO_FOCUS":              15004,
		"CMD_FOCUS_STOP_ASTRO_AUTO_FOCUS":               15005,
		"CMD_NOTIFY_TELE_WIDI_PICTURE_MATCHING":         15200,
		"CMD_NOTIFY_ELE":                                15201,
		"CMD_NOTIFY_CHARGE":                             15202,
		"CMD_NOTIFY_SDCARD_INFO":                        15203,
		"CMD_NOTIFY_TELE_RECORD_TIME":                   15204,
		"CMD_NOTIFY_TELE_TIMELAPSE_OUT_TIME":            15205,
		"CMD_NOTIFY_STATE_CAPTURE_RAW_DARK":             15206,
		"CMD_NOTIFY_PROGRASS_CAPTURE_RAW_DARK":          15207,
		"CMD_NOTIFY_STATE_CAPTURE_RAW_LIVE_STACKING":    15208,
		"CMD_NOTIFY_PROGRASS_CAPTURE_RAW_LIVE_STACKING": 15209,
		"CMD_NOTIFY_STATE_ASTRO_CALIBRATION":            15210,
		"CMD_NOTIFY_STATE_ASTRO_GOTO":                   15211,
		"CMD_NOTIFY_STATE_ASTRO_TRACKING":               15212,
		"CMD_NOTIFY_TELE_SET_PARAM":                     15213,
		"CMD_NOTIFY_WIDE_SET_PARAM":                     15214,
		"CMD_NOTIFY_TELE_FUNCTION_STATE":                15215,
		"CMD_NOTIFY_WIDE_FUNCTION_STATE":                15216,
		"CMD_NOTIFY_SET_FEATURE_PARAM":                  15217,
		"CMD_NOTIFY_TELE_BURST_PROGRESS":                15218,
		"CMD_NOTIFY_PANORAMA_PROGRESS":                  15219,
		"CMD_NOTIFY_WIDE_BURST_PROGRESS":                15220,
		"CMD_NOTIFY_RGB_STATE":                          15221,
		"CMD_NOTIFY_POWER_IND_STATE":                    15222,
		"CMD_NOTIFY_WS_HOST_SLAVE_MODE":                 15223,
		"CMD_NOTIFY_MTP_STATE":                          15224,
		"CMD_NOTIFY_TRACK_RESULT":                       15225,
		"CMD_NOTIFY_WIDE_TIMELAPSE_OUT_TIME":            15226,
		"CMD_NOTIFY_CPU_MODE":                           15227,
		"CMD_NOTIFY_STATE_ASTRO_TRACKING_SPECIAL":       15228,
		"CMD_NOTIFY_POWER_OFF":                          15229,
	}
)

func (x DwarfCMD) Enum() *DwarfCMD {
	p := new(DwarfCMD)
	*p = x
	return p
}

func (x DwarfCMD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DwarfCMD) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[2].Descriptor()
}

func (DwarfCMD) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[2]
}

func (x DwarfCMD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DwarfCMD.Descriptor instead.
func (DwarfCMD) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

type DwarfErrorCode int32

const (
	DwarfErrorCode_OK                                     DwarfErrorCode = 0      // OK : No Error
	DwarfErrorCode_WS_PARSE_PROTOBUF_ERROR                DwarfErrorCode = -1     // Protobuf parsing failed
	DwarfErrorCode_WS_SDCARD_NOT_EXIST                    DwarfErrorCode = -2     // SD card not detected
	DwarfErrorCode_WS_INVALID_PARAM                       DwarfErrorCode = -3     // Invalid parameter
	DwarfErrorCode_WS_SDCARD_WRITE_ERROR                  DwarfErrorCode = -4     // Image writing to SD card failed (maybe the card is full)
	DwarfErrorCode_CODE_CAMERA_TELE_OPENED                DwarfErrorCode = -10500 // Camera is turned on
	DwarfErrorCode_CODE_CAMERA_TELE_CLOSED                DwarfErrorCode = -10501 // Camera is off
	DwarfErrorCode_CODE_CAMERA_TELE_ISP_SET_FAILED        DwarfErrorCode = -10502 // ISP parameter settings failed
	DwarfErrorCode_CODE_CAMERA_TELE_OPEN_FAILED           DwarfErrorCode = -10504 // Camera failed to open
	DwarfErrorCode_CODE_CAMERA_TELE_WORKING_BUSY_STACK    DwarfErrorCode = -10507 // The telephoto camera is busy.
	DwarfErrorCode_CODE_CAMERA_TELE_CAPTURE_RAW_FAILED    DwarfErrorCode = -10510 // Failed to catch RAW image
	DwarfErrorCode_CODE_CAMERA_TELE_WORKING_BUSY          DwarfErrorCode = -10511 // The telephoto camera is busy with work
	DwarfErrorCode_CODE_ASTRO_PLATE_SOLVING_FAILED        DwarfErrorCode = -11500 // Plate solving failed
	DwarfErrorCode_CODE_ASTRO_FUNCTION_BUSY               DwarfErrorCode = -11501 // Astronomical function busy
	DwarfErrorCode_CODE_ASTRO_DARK_GAIN_OUT_OF_RANGE      DwarfErrorCode = -11502 // Gain beyond darkfield shooting range (darkfield coverage 30-150 gain)
	DwarfErrorCode_CODE_ASTRO_DARK_NOT_FOUND              DwarfErrorCode = -11503 // Darkfield not found
	DwarfErrorCode_CODE_ASTRO_CALIBRATION_FAILED          DwarfErrorCode = -11504 // Calibration failed
	DwarfErrorCode_CODE_ASTRO_GOTO_FAILED                 DwarfErrorCode = -11505 // GOTO failed
	DwarfErrorCode_CODE_ASTRO_NEED_GOTO                   DwarfErrorCode = -11513 // No GOTO
	DwarfErrorCode_CODE_ASTRO_NEED_ADJUST_SHOOT_PARAM     DwarfErrorCode = -11514 // Parameters are not suitable
	DwarfErrorCode_CODE_CAMERA_WIDE_OPENED                DwarfErrorCode = -12500 // Wide-angle camera turned on
	DwarfErrorCode_CODE_CAMERA_WIDE_CLOSED                DwarfErrorCode = -12501 // The wide-angle camera is turned off
	DwarfErrorCode_CODE_CAMERA_WIDE_CANNOT_FOUND          DwarfErrorCode = -12502 // Can't find the camera
	DwarfErrorCode_CODE_CAMERA_WIDE_OPEN_FAILED           DwarfErrorCode = -12503 // Failed to open camera
	DwarfErrorCode_CODE_CAMERA_WIDE_CLOSE_FAILED          DwarfErrorCode = -12504 // Failed to turn off camera
	DwarfErrorCode_CODE_CAMERA_WIDE_SET_ISP_FAILED        DwarfErrorCode = -12505 // Failed to set ISP parameters
	DwarfErrorCode_CODE_CAMERA_WIDE_PHOTOGRAPHING         DwarfErrorCode = -12506 // Taking pictures
	DwarfErrorCode_CODE_SYSTEM_SET_TIME_FAILED            DwarfErrorCode = -13300 // Set time failed
	DwarfErrorCode_CODE_SYSTEM_SET_TIMEZONE_FAILED        DwarfErrorCode = -13301 // Failed to set time zone
	DwarfErrorCode_CODE_SYSTEM_SETTING_TIMEZONE_FAILED    DwarfErrorCode = -13302 // Time zone setting failed
	DwarfErrorCode_CODE_STEP_MOTOR_LIMIT_POSITION_WARNING DwarfErrorCode = -14518 // GOTO limit warning
	DwarfErrorCode_CODE_STEP_MOTOR_LIMIT_POSITION_HITTED  DwarfErrorCode = -14519 // Star collision limit
	DwarfErrorCode_CODE_PANORAMA_PHOTO_FAILED             DwarfErrorCode = -15600 // Panoramic shooting failed
	DwarfErrorCode_CODE_PANORAMA_MOTOR_RESET_FAILED       DwarfErrorCode = -15601 // Panoramic shooting motor reset failed
)

// Enum value maps for DwarfErrorCode.
var (
	DwarfErrorCode_name = map[int32]string{
		0:      "OK",
		-1:     "WS_PARSE_PROTOBUF_ERROR",
		-2:     "WS_SDCARD_NOT_EXIST",
		-3:     "WS_INVALID_PARAM",
		-4:     "WS_SDCARD_WRITE_ERROR",
		-10500: "CODE_CAMERA_TELE_OPENED",
		-10501: "CODE_CAMERA_TELE_CLOSED",
		-10502: "CODE_CAMERA_TELE_ISP_SET_FAILED",
		-10504: "CODE_CAMERA_TELE_OPEN_FAILED",
		-10507: "CODE_CAMERA_TELE_WORKING_BUSY_STACK",
		-10510: "CODE_CAMERA_TELE_CAPTURE_RAW_FAILED",
		-10511: "CODE_CAMERA_TELE_WORKING_BUSY",
		-11500: "CODE_ASTRO_PLATE_SOLVING_FAILED",
		-11501: "CODE_ASTRO_FUNCTION_BUSY",
		-11502: "CODE_ASTRO_DARK_GAIN_OUT_OF_RANGE",
		-11503: "CODE_ASTRO_DARK_NOT_FOUND",
		-11504: "CODE_ASTRO_CALIBRATION_FAILED",
		-11505: "CODE_ASTRO_GOTO_FAILED",
		-11513: "CODE_ASTRO_NEED_GOTO",
		-11514: "CODE_ASTRO_NEED_ADJUST_SHOOT_PARAM",
		-12500: "CODE_CAMERA_WIDE_OPENED",
		-12501: "CODE_CAMERA_WIDE_CLOSED",
		-12502: "CODE_CAMERA_WIDE_CANNOT_FOUND",
		-12503: "CODE_CAMERA_WIDE_OPEN_FAILED",
		-12504: "CODE_CAMERA_WIDE_CLOSE_FAILED",
		-12505: "CODE_CAMERA_WIDE_SET_ISP_FAILED",
		-12506: "CODE_CAMERA_WIDE_PHOTOGRAPHING",
		-13300: "CODE_SYSTEM_SET_TIME_FAILED",
		-13301: "CODE_SYSTEM_SET_TIMEZONE_FAILED",
		-13302: "CODE_SYSTEM_SETTING_TIMEZONE_FAILED",
		-14518: "CODE_STEP_MOTOR_LIMIT_POSITION_WARNING",
		-14519: "CODE_STEP_MOTOR_LIMIT_POSITION_HITTED",
		-15600: "CODE_PANORAMA_PHOTO_FAILED",
		-15601: "CODE_PANORAMA_MOTOR_RESET_FAILED",
	}
	DwarfErrorCode_value = map[string]int32{
		"OK":                                     0,
		"WS_PARSE_PROTOBUF_ERROR":                -1,
		"WS_SDCARD_NOT_EXIST":                    -2,
		"WS_INVALID_PARAM":                       -3,
		"WS_SDCARD_WRITE_ERROR":                  -4,
		"CODE_CAMERA_TELE_OPENED":                -10500,
		"CODE_CAMERA_TELE_CLOSED":                -10501,
		"CODE_CAMERA_TELE_ISP_SET_FAILED":        -10502,
		"CODE_CAMERA_TELE_OPEN_FAILED":           -10504,
		"CODE_CAMERA_TELE_WORKING_BUSY_STACK":    -10507,
		"CODE_CAMERA_TELE_CAPTURE_RAW_FAILED":    -10510,
		"CODE_CAMERA_TELE_WORKING_BUSY":          -10511,
		"CODE_ASTRO_PLATE_SOLVING_FAILED":        -11500,
		"CODE_ASTRO_FUNCTION_BUSY":               -11501,
		"CODE_ASTRO_DARK_GAIN_OUT_OF_RANGE":      -11502,
		"CODE_ASTRO_DARK_NOT_FOUND":              -11503,
		"CODE_ASTRO_CALIBRATION_FAILED":          -11504,
		"CODE_ASTRO_GOTO_FAILED":                 -11505,
		"CODE_ASTRO_NEED_GOTO":                   -11513,
		"CODE_ASTRO_NEED_ADJUST_SHOOT_PARAM":     -11514,
		"CODE_CAMERA_WIDE_OPENED":                -12500,
		"CODE_CAMERA_WIDE_CLOSED":                -12501,
		"CODE_CAMERA_WIDE_CANNOT_FOUND":          -12502,
		"CODE_CAMERA_WIDE_OPEN_FAILED":           -12503,
		"CODE_CAMERA_WIDE_CLOSE_FAILED":          -12504,
		"CODE_CAMERA_WIDE_SET_ISP_FAILED":        -12505,
		"CODE_CAMERA_WIDE_PHOTOGRAPHING":         -12506,
		"CODE_SYSTEM_SET_TIME_FAILED":            -13300,
		"CODE_SYSTEM_SET_TIMEZONE_FAILED":        -13301,
		"CODE_SYSTEM_SETTING_TIMEZONE_FAILED":    -13302,
		"CODE_STEP_MOTOR_LIMIT_POSITION_WARNING": -14518,
		"CODE_STEP_MOTOR_LIMIT_POSITION_HITTED":  -14519,
		"CODE_PANORAMA_PHOTO_FAILED":             -15600,
		"CODE_PANORAMA_MOTOR_RESET_FAILED":       -15601,
	}
)

func (x DwarfErrorCode) Enum() *DwarfErrorCode {
	p := new(DwarfErrorCode)
	*p = x
	return p
}

func (x DwarfErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DwarfErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[3].Descriptor()
}

func (DwarfErrorCode) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[3]
}

func (x DwarfErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DwarfErrorCode.Descriptor instead.
func (DwarfErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

type AstroTrackingSpecial int32

const (
	AstroTrackingSpecial_TRACKING_SUN  AstroTrackingSpecial = 0
	AstroTrackingSpecial_TRACKING_MOON AstroTrackingSpecial = 1
)

// Enum value maps for AstroTrackingSpecial.
var (
	AstroTrackingSpecial_name = map[int32]string{
		0: "TRACKING_SUN",
		1: "TRACKING_MOON",
	}
	AstroTrackingSpecial_value = map[string]int32{
		"TRACKING_SUN":  0,
		"TRACKING_MOON": 1,
	}
)

func (x AstroTrackingSpecial) Enum() *AstroTrackingSpecial {
	p := new(AstroTrackingSpecial)
	*p = x
	return p
}

func (x AstroTrackingSpecial) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AstroTrackingSpecial) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[4].Descriptor()
}

func (AstroTrackingSpecial) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[4]
}

func (x AstroTrackingSpecial) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AstroTrackingSpecial.Descriptor instead.
func (AstroTrackingSpecial) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

type SolarSystemTarget int32

const (
	SolarSystemTarget_Unknown SolarSystemTarget = 0
	SolarSystemTarget_Mercury SolarSystemTarget = 1
	SolarSystemTarget_Venus   SolarSystemTarget = 2
	SolarSystemTarget_Mars    SolarSystemTarget = 3
	SolarSystemTarget_Jupiter SolarSystemTarget = 4
	SolarSystemTarget_Saturn  SolarSystemTarget = 5
	SolarSystemTarget_Uranus  SolarSystemTarget = 6
	SolarSystemTarget_Neptune SolarSystemTarget = 7
	SolarSystemTarget_Moon    SolarSystemTarget = 8
	SolarSystemTarget_Sun     SolarSystemTarget = 9
)

// Enum value maps for SolarSystemTarget.
var (
	SolarSystemTarget_name = map[int32]string{
		0: "Unknown",
		1: "Mercury",
		2: "Venus",
		3: "Mars",
		4: "Jupiter",
		5: "Saturn",
		6: "Uranus",
		7: "Neptune",
		8: "Moon",
		9: "Sun",
	}
	SolarSystemTarget_value = map[string]int32{
		"Unknown": 0,
		"Mercury": 1,
		"Venus":   2,
		"Mars":    3,
		"Jupiter": 4,
		"Saturn":  5,
		"Uranus":  6,
		"Neptune": 7,
		"Moon":    8,
		"Sun":     9,
	}
)

func (x SolarSystemTarget) Enum() *SolarSystemTarget {
	p := new(SolarSystemTarget)
	*p = x
	return p
}

func (x SolarSystemTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolarSystemTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[5].Descriptor()
}

func (SolarSystemTarget) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[5]
}

func (x SolarSystemTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolarSystemTarget.Descriptor instead.
func (SolarSystemTarget) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

type PhotoMode int32

const (
	PhotoMode_Auto   PhotoMode = 0
	PhotoMode_Manual PhotoMode = 1
)

// Enum value maps for PhotoMode.
var (
	PhotoMode_name = map[int32]string{
		0: "Auto",
		1: "Manual",
	}
	PhotoMode_value = map[string]int32{
		"Auto":   0,
		"Manual": 1,
	}
)

func (x PhotoMode) Enum() *PhotoMode {
	p := new(PhotoMode)
	*p = x
	return p
}

func (x PhotoMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotoMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[6].Descriptor()
}

func (PhotoMode) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[6]
}

func (x PhotoMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhotoMode.Descriptor instead.
func (PhotoMode) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

type WBMode int32

const (
	WBMode_ColorTemperature WBMode = 0
	WBMode_SceneMode        WBMode = 1
)

// Enum value maps for WBMode.
var (
	WBMode_name = map[int32]string{
		0: "ColorTemperature",
		1: "SceneMode",
	}
	WBMode_value = map[string]int32{
		"ColorTemperature": 0,
		"SceneMode":        1,
	}
)

func (x WBMode) Enum() *WBMode {
	p := new(WBMode)
	*p = x
	return p
}

func (x WBMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WBMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[7].Descriptor()
}

func (WBMode) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[7]
}

func (x WBMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WBMode.Descriptor instead.
func (WBMode) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

type IrCut int32

const (
	IrCut_CUT  IrCut = 0
	IrCut_PASS IrCut = 1
)

// Enum value maps for IrCut.
var (
	IrCut_name = map[int32]string{
		0: "CUT",
		1: "PASS",
	}
	IrCut_value = map[string]int32{
		"CUT":  0,
		"PASS": 1,
	}
)

func (x IrCut) Enum() *IrCut {
	p := new(IrCut)
	*p = x
	return p
}

func (x IrCut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrCut) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[8].Descriptor()
}

func (IrCut) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[8]
}

func (x IrCut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrCut.Descriptor instead.
func (IrCut) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2a, 0xe4, 0x01, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x47,
	0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x4e,
	0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x0a, 0x2a, 0x73, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xb5, 0x23, 0x0a,
	0x08, 0x44, 0x77, 0x61, 0x72, 0x66, 0x43, 0x4d, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f,
	0x43, 0x4d, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x10, 0x90, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x91, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x50, 0x48,
	0x4f, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x92, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x42,
	0x55, 0x52, 0x53, 0x54, 0x10, 0x93, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x94, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x96, 0x4e, 0x12, 0x21, 0x0a,
	0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x97, 0x4e,
	0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54,
	0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x98, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x99,
	0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x9a, 0x4e, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x9b, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x9c, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x47,
	0x41, 0x49, 0x4e, 0x10, 0x9d, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x41,
	0x49, 0x4e, 0x10, 0x9e, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x9f, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0xa0, 0x4e, 0x12,
	0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x53, 0x54, 0x10,
	0xa1, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x53, 0x54, 0x10, 0xa2, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x41, 0x54,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa3, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x4e, 0x12,
	0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x55, 0x45, 0x10, 0xa5, 0x4e, 0x12, 0x1c, 0x0a,
	0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x55, 0x45, 0x10, 0xa6, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50, 0x4e, 0x45, 0x53, 0x53, 0x10, 0xa7, 0x4e, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0xa8, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0xa9, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0xaa, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57,
	0x42, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0xab, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x57, 0x42, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0xac, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f, 0x43, 0x54, 0x10, 0xad, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f, 0x43, 0x54, 0x10, 0xae, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x52, 0x43, 0x55, 0x54, 0x10, 0xaf, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x52, 0x43, 0x55, 0x54, 0x10, 0xb0, 0x4e, 0x12, 0x2a, 0x0a,
	0x25, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0xb1, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0xb2, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xb3, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xb4, 0x4e, 0x12, 0x26,
	0x0a, 0x21, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x10, 0xb5, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53,
	0x10, 0xb6, 0x4e, 0x12, 0x2d, 0x0a, 0x28, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0xb7, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4a, 0x50, 0x47, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xb8, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f,
	0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xf8, 0x55, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d,
	0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xf9, 0x55, 0x12, 0x1d, 0x0a, 0x18, 0x43,
	0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x47,
	0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x4f, 0x10, 0xfa, 0x55, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x4d,
	0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x47, 0x4f,
	0x54, 0x4f, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0xfb, 0x55, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x10, 0xfc, 0x55, 0x12, 0x2e, 0x0a, 0x29,
	0x43, 0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0xfd, 0x55, 0x12, 0x2d, 0x0a, 0x28,
	0x43, 0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0xfe, 0x55, 0x12, 0x25, 0x0a, 0x20, 0x43,
	0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10,
	0xff, 0x55, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57,
	0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x80, 0x56, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f,
	0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x47, 0x4f, 0x54, 0x5f,
	0x44, 0x41, 0x52, 0x4b, 0x10, 0x81, 0x56, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x5f, 0x41,
	0x53, 0x54, 0x52, 0x4f, 0x5f, 0x47, 0x4f, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x82, 0x56, 0x12,
	0x29, 0x0a, 0x24, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x83, 0x56, 0x12, 0x28, 0x0a, 0x23, 0x43, 0x4d,
	0x44, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x10, 0x84, 0x56, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x10, 0xe0, 0x5d, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0xe1, 0x5d, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xe2, 0x5d, 0x12, 0x21, 0x0a, 0x1c,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xe3, 0x5d, 0x12,
	0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xe4, 0x5d, 0x12, 0x1c, 0x0a,
	0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xe5, 0x5d, 0x12, 0x1d, 0x0a, 0x18, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0xe6, 0x5d, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x10, 0xe7, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0xe8, 0x5d, 0x12, 0x23,
	0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0xe9, 0x5d, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x53, 0x54, 0x10, 0xea, 0x5d, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x53, 0x54, 0x10, 0xeb, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xec, 0x5d, 0x12, 0x23,
	0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xed, 0x5d, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x55, 0x45, 0x10, 0xee,
	0x5d, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x57, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x55, 0x45, 0x10, 0xef, 0x5d, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0xf0, 0x5d, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x50,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0xf1, 0x5d, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57,
	0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xf2, 0x5d, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xf3, 0x5d, 0x12, 0x1e, 0x0a, 0x19, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f, 0x43, 0x54, 0x10, 0xf4, 0x5d, 0x12, 0x1e, 0x0a, 0x19, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x57, 0x42, 0x5f, 0x43, 0x54, 0x10, 0xf5, 0x5d, 0x12, 0x1f, 0x0a, 0x1a, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0xf6, 0x5d, 0x12, 0x1a, 0x0a, 0x15,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f,
	0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0xf7, 0x5d, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0xf8, 0x5d, 0x12, 0x2a, 0x0a, 0x25, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0xf9, 0x5d, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0xfa, 0x5d,
	0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57,
	0x49, 0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x53, 0x10, 0xfb, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xfc, 0x5d, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0xc8, 0x65, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x10, 0xc9, 0x65, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xca,
	0x65, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xcb, 0x65, 0x12,
	0x1b, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x47, 0x42, 0x10, 0xbc, 0x69, 0x12, 0x1c, 0x0a, 0x17,
	0x43, 0x4d, 0x44, 0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x52, 0x47, 0x42, 0x10, 0xbd, 0x69, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4d,
	0x44, 0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xbe, 0x69, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4d, 0x44,
	0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0xbf, 0x69, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xc0, 0x69, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4d,
	0x44, 0x5f, 0x52, 0x47, 0x42, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x42, 0x4f,
	0x4f, 0x54, 0x10, 0xc1, 0x69, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x43,
	0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x98, 0x75,
	0x12, 0x27, 0x0a, 0x22, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x99, 0x75, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4d, 0x44,
	0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x5f, 0x46, 0x4f, 0x43, 0x55,
	0x53, 0x10, 0x9a, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x43, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x9b, 0x75, 0x12, 0x25,
	0x0a, 0x20, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x43,
	0x55, 0x53, 0x10, 0x9c, 0x75, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x4f, 0x43,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x9d, 0x75, 0x12, 0x2a, 0x0a, 0x25, 0x43,
	0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x57,
	0x49, 0x44, 0x49, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x49, 0x4e, 0x47, 0x10, 0xe0, 0x76, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x10, 0xe1, 0x76, 0x12, 0x16, 0x0a, 0x11,
	0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x10, 0xe2, 0x76, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x53, 0x44, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xe3,
	0x76, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0xe4, 0x76, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x41, 0x50, 0x53, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xe5, 0x76, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x44, 0x41, 0x52,
	0x4b, 0x10, 0xe6, 0x76, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0xe7, 0x76, 0x12,
	0x2f, 0x0a, 0x2a, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x5f,
	0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0xe8, 0x76,
	0x12, 0x32, 0x0a, 0x2d, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x52, 0x41, 0x57, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0xe9, 0x76, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xea, 0x76, 0x12, 0x20, 0x0a,
	0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x10, 0xeb, 0x76, 0x12,
	0x24, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0xec, 0x76, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0xed, 0x76, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0xee, 0x76, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xef, 0x76, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xf0, 0x76, 0x12,
	0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10,
	0xf1, 0x76, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0xf2, 0x76, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xf3, 0x76, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4d,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55,
	0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xf4, 0x76, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x47,
	0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xf5, 0x76, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4d,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xf6, 0x76, 0x12, 0x22, 0x0a, 0x1d, 0x43,
	0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x57, 0x53, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xf7, 0x76, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x54,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xf8, 0x76, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4d,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xf9, 0x76, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x4d, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xfa,
	0x76, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x43, 0x50, 0x55, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xfb, 0x76, 0x12, 0x2c, 0x0a, 0x27, 0x43,
	0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0xfc, 0x76, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4d, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0xfd, 0x76, 0x2a, 0x9f, 0x0b, 0x0a, 0x0e, 0x44, 0x77, 0x61, 0x72, 0x66, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x17, 0x57, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x42, 0x55, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x57, 0x53, 0x5f, 0x53, 0x44, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x57, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0xfd, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x57, 0x53, 0x5f, 0x53, 0x44, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0xfc, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xfb, 0xad, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x49, 0x53, 0x50, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfa, 0xad, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0xf8, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x30, 0x0a, 0x23, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54,
	0x45, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x53, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0xf5, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x30, 0x0a, 0x23, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x41,
	0x57, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf2, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x42, 0x55, 0x53, 0x59, 0x10, 0xf1, 0xad, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x2c, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x94, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a,
	0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x93, 0xa6, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54,
	0x52, 0x4f, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x92, 0xa6, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54,
	0x52, 0x4f, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x91, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0xa6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x8f, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a,
	0x14, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x10, 0x87, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2f, 0x0a, 0x22, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x86, 0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0xac, 0x9e, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0xab, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a,
	0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xaa,
	0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa9, 0x9e, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x52, 0x41, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa8, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x57, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x50, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0xa7, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b,
	0x0a, 0x1e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0xa6, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x8c, 0x98, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5a, 0x4f, 0x4e,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x8b, 0x98, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x30, 0x0a, 0x23, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5a,
	0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x8a, 0x98, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x33, 0x0a, 0x26, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0xca, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x32, 0x0a, 0x25, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x54,
	0x54, 0x45, 0x44, 0x10, 0xc9, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27,
	0x0a, 0x1a, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x5f,
	0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x86, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x8f, 0x86, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0x3b, 0x0a, 0x14, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4f,
	0x4e, 0x10, 0x01, 0x2a, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x72, 0x63, 0x75, 0x72,
	0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x65, 0x6e, 0x75, 0x73, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x61, 0x72, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x75, 0x70, 0x69,
	0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x72, 0x61, 0x6e, 0x75, 0x73, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x6f,
	0x6f, 0x6e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x75, 0x6e, 0x10, 0x09, 0x2a, 0x21, 0x0a,
	0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x01,
	0x2a, 0x2d, 0x0a, 0x06, 0x57, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x2a,
	0x1a, 0x0a, 0x05, 0x49, 0x72, 0x43, 0x75, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x42, 0x1b, 0x5a, 0x19, 0x76,
	0x70, 0x72, 0x65, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x77, 0x61, 0x72,
	0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_protocol_proto_goTypes = []interface{}{
	(ModuleId)(0),             // 0: ModuleId
	(MessageTypeId)(0),        // 1: MessageTypeId
	(DwarfCMD)(0),             // 2: DwarfCMD
	(DwarfErrorCode)(0),       // 3: DwarfErrorCode
	(AstroTrackingSpecial)(0), // 4: AstroTrackingSpecial
	(SolarSystemTarget)(0),    // 5: SolarSystemTarget
	(PhotoMode)(0),            // 6: PhotoMode
	(WBMode)(0),               // 7: WBMode
	(IrCut)(0),                // 8: IrCut
}
var file_protocol_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
